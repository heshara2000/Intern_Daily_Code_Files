// import { Inter } from "next/font/google";
// import "./globals.css";
// import { createFlagsmithInstance } from "flagsmith/isomorphic";
// import Providers from "./providers";
// const inter = Inter({ subsets: ["latin"] });


// // const geistSans = Geist({
// //   variable: "--font-geist-sans",
// //   subsets: ["latin"],
// // });

// // const geistMono = Geist_Mono({
// //   variable: "--font-geist-mono",
// //   subsets: ["latin"],
// // });

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default async function RootLayout({ children }) {
//     const flagsmith = createFlagsmithInstance();
//   await flagsmith.init({
//     environmentID: process.env.NEXT_PUBLIC_FLAGS_ENVIRONMENT_ID,
//   });
//   await flagsmith.identify(123, { email: "hesh@eddi.org" });
//   const serverState = flagsmith.getState();
//   console.log("serverState" , serverState)
//   return (
//     <html lang="en">
//       <Providers serverState={serverState}>
//         <body className={inter.className}>
//           {children}
//         </body>

//       </Providers>
      
//     </html>
//   );
// }


// src/app/layout.js

import { Inter } from "next/font/google";
import "./globals.css";
import { createFlagsmithInstance } from "flagsmith/isomorphic";
import Providers from "./providers";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Move async logic to a helper
async function getServerState() {
  const flagsmith = createFlagsmithInstance();
  await flagsmith.init({
    environmentID: process.env.NEXT_PUBLIC_FLAGS_ENVIRONMENT_ID,
  });
  await flagsmith.identify(123, { email: "hesh@eddi.org" });
  return flagsmith.getState();
}

export default function RootLayout({ children }) {
  // React component must be synchronous
  return (
    <html lang="en">
      <body className={inter.className}>
        <AsyncProviders>{children}</AsyncProviders>
      </body>
    </html>
  );
}

// This handles async flagsmith setup and wraps the children
async function AsyncProviders({ children }) {
  const serverState = await getServerState();
  return <Providers serverState={serverState}>{children}</Providers>;
}

